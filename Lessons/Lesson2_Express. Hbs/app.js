const express = require('express'); // Таким чином ми реквайрим express

const expHbs = require('express-handlebars'); // Таким чином ми реквайрим хендлбарс

const path = require('path');//Таким чином ми підключаєм білотеку path вона є в ноді з коробки інсталити її не треба
                            // допомагає нам працювати з шляхами на люій ОС за допомогою path.join.
                            //path.normalize виправляє і бачить неправильно написані шляхи


const app = express(); //таким чином ми створюєм нашу апку або сервер просто виконавши express як ф-цію
                        // (аналог http.createServer)

app.use(express.json());//таким чином ми вчимо експрес і нашу апку читати json файли для того щоб працювати наприклад з req.body

app.use(express.urlencoded({extended: true})); // таким чином ми вчимо express читати дані з json-ів(парсити).

/*app.use(express.static(__dirname, '/static')); //вчимо нашу ноду бачити і працювати з директорією static,
                                                      //вказавши шлях вручну, але це не надійно тому що на різних ОС,
                                                      // шляхи вказуються по різному тому для цього треба зареквайрити
                                                      // бібліотеку path*/

app.use(express.static(path.join(__dirname, 'static'))); //таким чином ми вчимо нашу апку бачити і працювати
                                                        // з директорією static за допомогою лібки path вона приймає
                                                       // в себе набір шляхів через кому

app.engine('.hbs', expHbs({
    extname: '.hbs',
    defaultLayout: null //це треба прописувати щоб у нас не просило папки layout

})); //Таким чином ми вказуєм наші апці що всі файли з розширенням .hbs з ними буде працювати двіжок express-handlebars
    // який ми встановили вище і він обробляє файли .hbs

app.set('view engine', '.hbs'); // цим ми встановлюєм опцію view engine для наших view, що двіжком будуть файли .hbs

app.set('views', path.join(__dirname, 'static')); //цим ми вказали що наші views лежать у цій папці


let users = [];//глобальний масив з юзерами

app.get('/', (req, res)=>{

    /**__dirname зсилається на поточну директорію в якій лежить наш app.js, __filename зсилається на директорію + файл*/
    /*console.log(__filename);
    console.log(__dirname);*/

    res.render('main')//таким чином ми вказуєм файл який ми хочемо відмалювати на фронті

}); //Таким чином ми отримуєм дані методом get аналог того як ми це робили за допомогою switch case
   //request це те що ти відсилаєш з фронта response це те що ми отримуєм назад на фронт з бекенда

app.get('/login', (req, res) => {
    res.render('login'); //Таким чином ми відмальовуєм сторінку лоігін
}); //таким методом ми будем гуляти по урлам

app.post('/register', ((req, res) => {
    let body = req.body;//в боді нам зберігаються файли які нам шлються з фронтенда на бекенд, зберігаються в json
                        //зберігаються в json форматі, тому треба навчити експрес читати json і також парсити дані
                        //з нього
    users.push(body);
    console.log(body);
    res.render('login', {title: 'HELLO WORLD', group: 'jscx-july-19'})//темплейтінг дозволяє нам динамізувати нашу сторінку,
                                                                      // наприклад за допомогою такого запису ми задаєм
                                                                      // змінну в яку передаєм дані які ми хочемо відмалювати на фронті
})); //переходим на урлу регістер


app.get('/users/:user_id'/*таким чином ми вказуєм динамічні параметри в квері*/, (req, res) => {
    console.log(req.params);// params це обєкт вякий пишеться id наших юзерів
    // res.json(users); // виводим наш мсасив з юзерами
    console.log(req.query);// ми можемо передавати додатковіпараметри через квері після знаку питання
    res.end(JSON.stringify(req.params))//відмальовуєм наші адішки
});

app.all('*', (req, res) => {
    res.json('NOT FOUND SORRY');
}); //Так робиться 404 сторінка фінальні обробники ставляться з самого низу

app.listen(3000, () => {
    console.log('listen 3000');
}); //створюєм лісенер нашого сервера з 3000 або 5000 портом.


